#!/bin/bash
# This script checks if a postgres server is accepting connections and is in recovery mode(reader) and 
# a 0 or 1 to the calling script.
# Designed to be called by HAProxy as an external script to check the status of the server behind endpoint it serves
#
# The purpose of this script is make haproxy capable of monitoring postgres properly
# It is recommended that a low-privileged postgres  user is created to be used by this script.
# For eg. create  user healthchkusr login password 'hc321';
# 
# THIS FILE PURELY SERVES AS A REFERENCE TO WRITE AN EXTERNAL SCRIPT FOR USE WITH HAPROXY
# ONE SHOULD IDEALLY NOT SAVE CLEAR TEXT PASSWORDS AND SHOULD TRY AND INTEGRATE WITH AWS_SECRETS MANAGER OR OTHER METHODS
#
# HAPROXY CALLS THIS SCRIPT WITH THE FOLLOWING ARGUEMENTS 
# $1 = Virtual Service IP (VIP)
# $2 = Virtual Service Port (VPT)
# $3 = Real Server IP (RIP)
# $4 = Real Server Port (RPT) 
# $5 = Check Source IP 
#
# The script is directly referenced in each cluster configuration HAProxy file with the keyword external-check 
# example :
#  external-check command /bin/true
#
# Always use absolute paths  

PGBIN=/usr/bin/psql
PGSQL_HOST="$3"
PGSQL_PORT="$4"
PGSQL_DATABASE="postgres"
PGSQL_USERNAME="postgres"
export PGPASSWORD=""
TMP_FILE="/tmp/pgsqlchk.out"
ERR_FILE="/tmp/pgsqlchk.err"


# We perform a simple query that should return a few results

VALUE="$( /usr/bin/psql -t -h $PGSQL_HOST -U postgres -c 'select pg_is_in_recovery();' )"

# pg_is_in_recovery function explained below
# Name 			Return Type 	Description
# pg_is_in_recovery() 	bool 		True if recovery is still in progress.

if [ "$VALUE" = " t" ]
then
    exit 0
else
    exit 1
fi
